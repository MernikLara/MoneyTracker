{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\Robotgeek\\\\Documents\\\\GitHub\\\\MoneyTracker\\\\my-money-tracker\\\\src\\\\components\\\\CategoryProvider.js\",\n  _s = $RefreshSig$();\nimport CategoryContext from \"../contexts/CategoryContext\";\nimport React, { useState, useEffect } from \"react\";\nimport { useContext } from \"react\";\nimport { LoginContext } from \"./LoginProvider\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CategoryProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [CategoryList, setCategoryList] = useState([]);\n  const storedUserID = parseInt(sessionStorage.getItem('userID'));\n  console.log(storedUserID);\n  const storedEmail = sessionStorage.getItem('email');\n  const storedName = sessionStorage.getItem('name');\n  const storedSurname = sessionStorage.getItem('surname');\n  const storedIsLoggedIn = JSON.parse(sessionStorage.getItem('isLoggedIn'));\n  useEffect(() => {\n    fetch(`http://localhost:8080/api/v1/kategorija/getbyuserid/${storedUserID}`).then(res => {\n      return res.json();\n    }).then(data => {\n      setCategoryList(data);\n    }).catch(error => {\n      console.error(\"Error fetching transaction data:\", error);\n    });\n  }, [storedUserID]);\n  const updateCList = newCList => {\n    setCategoryList(newCList);\n  };\n  const addCategory = async (name, limita, tip) => {\n    console.log('addCategory function called with:', name, limita, tip, storedUserID);\n    try {\n      const newCategory = {\n        name,\n        userId: storedUserID,\n        limita,\n        tip,\n        transactions: []\n      };\n      const response = await axios.post('http://localhost:8080/api/v1/kategorija/add', newCategory);\n      if (response.status === 200) {\n        console.log(response);\n        console.log(newCategory);\n        setCategoryList([...CategoryList, newCategory]);\n        updateCList(CategoryList);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CategoryContext.Provider, {\n    value: {\n      CategoryList,\n      addCategory,\n      updateCList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n  /*const addTransaction = (categoryId, name, value) => {\r\n      // API call to add transaction\r\n      // For now, we'll mock the API call\r\n      const updatedCategories = categories.map(category => {\r\n        if (category.id === categoryId) {\r\n          const newTransaction = {\r\n            id: category.transactions.length + 1,\r\n            name,\r\n            value,\r\n            userId,\r\n            categoryId\r\n          };\r\n          category.transactions.push(newTransaction);\r\n        }\r\n        return category;\r\n      });\r\n      setCategories(updatedCategories);\r\n      setShowTransactionModal(false);\r\n    };*/\n}\n_s(CategoryProvider, \"5jlr0NTYZO8B5wAnOALGeJE6OOE=\");\n_c = CategoryProvider;\nexport default CategoryProvider;\nvar _c;\n$RefreshReg$(_c, \"CategoryProvider\");","map":{"version":3,"names":["CategoryContext","React","useState","useEffect","useContext","LoginContext","axios","jsxDEV","_jsxDEV","CategoryProvider","_ref","_s","children","CategoryList","setCategoryList","storedUserID","parseInt","sessionStorage","getItem","console","log","storedEmail","storedName","storedSurname","storedIsLoggedIn","JSON","parse","fetch","then","res","json","data","catch","error","updateCList","newCList","addCategory","name","limita","tip","newCategory","userId","transactions","response","post","status","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Users/Robotgeek/Documents/GitHub/MoneyTracker/my-money-tracker/src/components/CategoryProvider.js"],"sourcesContent":["import CategoryContext from \"../contexts/CategoryContext\";\r\nimport React, { useState, useEffect } from \"react\"\r\nimport { useContext } from \"react\";\r\nimport { LoginContext } from \"./LoginProvider\";\r\nimport axios from 'axios'\r\n\r\nfunction CategoryProvider({ children }) {\r\n    const [CategoryList, setCategoryList] = useState([]);\r\n    const storedUserID = parseInt(sessionStorage.getItem('userID'));\r\n    console.log(storedUserID)\r\n    const storedEmail = sessionStorage.getItem('email');\r\n    const storedName = sessionStorage.getItem('name');\r\n    const storedSurname = sessionStorage.getItem('surname');\r\n    const storedIsLoggedIn = JSON.parse(sessionStorage.getItem('isLoggedIn'));\r\n\r\n\r\n    useEffect(() => {\r\n        fetch(`http://localhost:8080/api/v1/kategorija/getbyuserid/${storedUserID}`)\r\n        .then((res) => {\r\n            return res.json();\r\n        })\r\n        .then((data) => {\r\n            setCategoryList(data)\r\n        }) .catch((error) => {\r\n            console.error(\"Error fetching transaction data:\", error);\r\n          });\r\n      }, \r\n      [storedUserID]);\r\n    \r\n\r\n    const updateCList = (newCList) => {\r\n        setCategoryList(newCList);\r\n    };\r\n\r\n    const addCategory = async (name, limita, tip) => {\r\n      console.log('addCategory function called with:', name, limita, tip, storedUserID);\r\n        try {\r\n          const newCategory = {\r\n            name,\r\n            userId: storedUserID,\r\n            limita,\r\n            tip,\r\n            transactions: []\r\n          }\r\n          const response = await axios.post('http://localhost:8080/api/v1/kategorija/add',  newCategory );\r\n          if (response.status === 200) {\r\n            console.log(response);\r\n            console.log(newCategory)\r\n            setCategoryList([...CategoryList, newCategory]);\r\n            updateCList(CategoryList);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      };\r\n\r\n    return (\r\n        <CategoryContext.Provider value={{CategoryList, addCategory, updateCList }}>\r\n            {children}\r\n        </CategoryContext.Provider>\r\n    )\r\n    /*const addTransaction = (categoryId, name, value) => {\r\n        // API call to add transaction\r\n        // For now, we'll mock the API call\r\n        const updatedCategories = categories.map(category => {\r\n          if (category.id === categoryId) {\r\n            const newTransaction = {\r\n              id: category.transactions.length + 1,\r\n              name,\r\n              value,\r\n              userId,\r\n              categoryId\r\n            };\r\n            category.transactions.push(newTransaction);\r\n          }\r\n          return category;\r\n        });\r\n        setCategories(updatedCategories);\r\n        setShowTransactionModal(false);\r\n      };*/\r\n}\r\n\r\nexport default CategoryProvider\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}