{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\Robotgeek\\\\Documents\\\\GitHub\\\\MoneyTracker\\\\my-money-tracker\\\\src\\\\components\\\\AlltransactionsTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useContext } from \"react\";\nimport DataTable from 'react-data-table-component';\nimport TransactionsContext from \"../contexts/TransactionsContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AlltransactionsTable = () => {\n  _s();\n  const {\n    TransactionList,\n    updateTList\n  } = useContext(TransactionsContext);\n  const [sortField, setSortField] = useState(null);\n  const [sortDirection, setSortDirection] = useState('asc');\n  const columns = useMemo(() => [{\n    name: 'ID',\n    selector: 'id'\n  }, {\n    name: 'Description',\n    selector: 'description'\n  }, {\n    name: 'Amount',\n    selector: 'amount'\n  }, {\n    name: 'Date',\n    selector: 'date'\n  }, {\n    name: 'Beneficiary',\n    selector: 'beneficiary'\n  }, {\n    name: 'Transaction Type',\n    selector: 'transactionType'\n  }, {\n    name: 'Cash or Credit',\n    selector: 'cashCredit'\n  }, {\n    name: 'Category ID',\n    selector: 'categoryID'\n  }], []);\n  useEffect(() => {\n    const sortTransactions = list => {\n      return list.sort((a, b) => {\n        if (a[sortField] < b[sortField]) {\n          return sortDirection === 'asc' ? -1 : 1;\n        }\n        if (a[sortField] > b[sortField]) {\n          return sortDirection === 'asc' ? 1 : -1;\n        }\n        return 0;\n      });\n    };\n    if (sortField !== null) {\n      updateTList(sortTransactions(TransactionList));\n    }\n  }, [sortField, sortDirection]);\n  const handleSort = (column, direction) => {\n    setSortField(column.selector);\n    setSortDirection(direction);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Prihodi\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      columns: columns,\n      data: TransactionList,\n      onSort: handleSort,\n      sortServer: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Odhodi\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      columns: columns,\n      data: TransactionList,\n      onSort: handleSort,\n      sortServer: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(AlltransactionsTable, \"jyh5UszQHqFku+KgD7Jtr30u1Mg=\");\n_c = AlltransactionsTable;\nexport default AlltransactionsTable;\nvar _c;\n$RefreshReg$(_c, \"AlltransactionsTable\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useContext","DataTable","TransactionsContext","jsxDEV","_jsxDEV","Fragment","_Fragment","AlltransactionsTable","_s","TransactionList","updateTList","sortField","setSortField","sortDirection","setSortDirection","columns","name","selector","sortTransactions","list","sort","a","b","handleSort","column","direction","children","fileName","_jsxFileName","lineNumber","columnNumber","data","onSort","sortServer","_c","$RefreshReg$"],"sources":["D:/Users/Robotgeek/Documents/GitHub/MoneyTracker/my-money-tracker/src/components/AlltransactionsTable.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useContext } from \"react\"\r\nimport DataTable from 'react-data-table-component';\r\nimport TransactionsContext from \"../contexts/TransactionsContext\"\r\n\r\nconst AlltransactionsTable = () => {\r\n    const { TransactionList, updateTList } = useContext(TransactionsContext);\r\n    const [sortField, setSortField] = useState(null);\r\n    const [sortDirection, setSortDirection] = useState('asc');\r\n\r\n    const columns = useMemo(() => [\r\n        { name: 'ID', selector: 'id' },\r\n        { name: 'Description', selector: 'description' },\r\n        { name: 'Amount', selector: 'amount' },\r\n        { name: 'Date', selector: 'date' },\r\n        { name: 'Beneficiary', selector: 'beneficiary' },\r\n        { name: 'Transaction Type', selector: 'transactionType' },\r\n        { name: 'Cash or Credit', selector: 'cashCredit' },\r\n        { name: 'Category ID', selector: 'categoryID' }\r\n    ], []);\r\n\r\n    useEffect(() => {\r\n        const sortTransactions = (list) => {\r\n            return list.sort((a, b) => {\r\n                if (a[sortField] < b[sortField]) {\r\n                    return sortDirection === 'asc' ? -1 : 1;\r\n                }\r\n                if (a[sortField] > b[sortField]) {\r\n                    return sortDirection === 'asc' ? 1 : -1;\r\n                }\r\n                return 0;\r\n            });\r\n        };\r\n\r\n        if (sortField !== null) {\r\n            updateTList(sortTransactions(TransactionList));\r\n        }\r\n    }, [sortField, sortDirection]);\r\n\r\n    const handleSort = (column, direction) => {\r\n        setSortField(column.selector);\r\n        setSortDirection(direction);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h2>Prihodi</h2>\r\n            <DataTable\r\n                columns={columns}\r\n                data={TransactionList}\r\n                onSort={handleSort}\r\n                sortServer\r\n            />\r\n            <h2>Odhodi</h2>\r\n            <DataTable\r\n                columns={columns}\r\n                data={TransactionList}\r\n                onSort={handleSort}\r\n                sortServer\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AlltransactionsTable;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}