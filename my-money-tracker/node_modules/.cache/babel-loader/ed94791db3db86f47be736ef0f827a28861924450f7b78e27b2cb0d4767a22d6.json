{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\Robotgeek\\\\Documents\\\\GitHub\\\\MoneyTracker\\\\my-money-tracker\\\\src\\\\components\\\\BudgetProvider.js\",\n  _s = $RefreshSig$();\nimport IncomeContext from '../contexts/IncomeContext';\nimport ExpenditureContext from '../contexts/ExpenditureContext';\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction budgetProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [balance, setBalance] = useState(0);\n  const [Maxbuget, setMaxbudget] = useState(0);\n  const [progressBar, setProgressbar] = useState(100);\n  sessionStorage.setItem('budget', balance);\n  UserID = sessionStorage.getItem('userID');\n  let storedUserID = parseInt(UserID);\n  const UserID = parseInt(sessionStorage.getItem('userID'));\n  const Income = {\n    name: name,\n    kategorijaidprihod: kategorijaid,\n    useridprihod: UserID,\n    date: date,\n    value: value,\n    userid: UserID\n  };\n  const Expenditure = {\n    name: name,\n    kategorijaiprihod: kategorijaid,\n    useridodhod: useridodhod,\n    value: value,\n    userid: UserID\n  };\n\n  //TODO: Edit to make getBalance function useEffect so it's automatic\n  useEffect(() => {\n    fetch(`http://localhost:8080/api/v1/racun/getbyuserid/${storedUserID}`).then(res => {\n      return res.json();\n    }).then(data => {\n      if (Array.isArray(data)) {\n        setBalance(data);\n      } else {\n        console.warn('Received non-array data:', data);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching transaction data:\", error);\n    });\n  }, [storedUserID]);\n  const UpdateBudget = Transaction => {\n    if (Transaction.type === Income) {\n      const add = Income.value;\n      balance = balance + add;\n      //API PUT call\n      sessionStorage.setItem('budget', balance);\n    }\n    if (Transaction.type === Expenditure) {\n      const subtract = Expenditure.value;\n      balance = balance - subtract;\n      //API PUT call\n      sessionStorage.setItem('budget', balance);\n    }\n  };\n  const updateMaxbudget = limit => {\n    Maxbuget = Maxbuget + limit;\n    //API PUT call\n  };\n\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: {\n      updateMaxbudget,\n      UpdateBudget\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n_s(budgetProvider, \"wUI7BTy68IMNgV1gEjs/7pQBPNQ=\");\nexport default budgetProvider;","map":{"version":3,"names":["IncomeContext","ExpenditureContext","React","useState","useEffect","jsxDEV","_jsxDEV","budgetProvider","_ref","_s","children","balance","setBalance","Maxbuget","setMaxbudget","progressBar","setProgressbar","sessionStorage","setItem","UserID","getItem","storedUserID","parseInt","Income","name","kategorijaidprihod","kategorijaid","useridprihod","date","value","userid","Expenditure","kategorijaiprihod","useridodhod","fetch","then","res","json","data","Array","isArray","console","warn","catch","error","UpdateBudget","Transaction","type","add","subtract","updateMaxbudget","limit","TransactionsContext","Provider","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/Users/Robotgeek/Documents/GitHub/MoneyTracker/my-money-tracker/src/components/BudgetProvider.js"],"sourcesContent":["import IncomeContext from '../contexts/IncomeContext'\r\nimport ExpenditureContext from '../contexts/ExpenditureContext'\r\nimport React, { useState, useEffect } from \"react\"\r\n\r\nfunction budgetProvider({ children }) {\r\n    const [balance, setBalance] = useState(0); \r\n    const [Maxbuget, setMaxbudget] = useState(0);\r\n    const [progressBar, setProgressbar] = useState(100);\r\n    sessionStorage.setItem('budget', balance);\r\n    UserID = sessionStorage.getItem('userID');\r\n    let storedUserID = parseInt(UserID);\r\n    const UserID = parseInt(sessionStorage.getItem('userID')); \r\n    const Income = {\r\n        name: name,\r\n        kategorijaidprihod: kategorijaid,\r\n        useridprihod: UserID,\r\n        date: date,\r\n        value: value,\r\n        userid: UserID\r\n    };\r\n    const Expenditure = {\r\n        name: name,\r\n        kategorijaiprihod: kategorijaid,\r\n        useridodhod: useridodhod,\r\n        value: value,\r\n        userid: UserID\r\n    }\r\n    \r\n    //TODO: Edit to make getBalance function useEffect so it's automatic\r\n    useEffect(() => {\r\n        fetch(`http://localhost:8080/api/v1/racun/getbyuserid/${storedUserID}`)\r\n        .then((res) => {\r\n            return res.json();\r\n        })\r\n        .then((data) => {\r\n            if (Array.isArray(data)) {\r\n                setBalance(data)\r\n            } else {\r\n                console.warn('Received non-array data:', data);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error fetching transaction data:\", error);\r\n        });\r\n    }, [storedUserID]);\r\n\r\n\r\n    \r\n\r\n    const UpdateBudget = (Transaction) =>{\r\n\r\n\r\n        if(Transaction.type === Income){\r\n            const add = Income.value\r\n            balance = balance + add\r\n            //API PUT call\r\n            sessionStorage.setItem('budget', balance)\r\n        }\r\n        if(Transaction.type === Expenditure){\r\n            const subtract = Expenditure.value\r\n            balance = balance - subtract\r\n            //API PUT call\r\n            sessionStorage.setItem('budget', balance)\r\n        }\r\n    }\r\n    const updateMaxbudget = (limit) => {\r\n        Maxbuget = Maxbuget + limit\r\n        //API PUT call\r\n\r\n    }\r\n    return (\r\n        <TransactionsContext.Provider value={{updateMaxbudget, UpdateBudget }}>\r\n            {children}\r\n        </TransactionsContext.Provider>\r\n    )\r\n}\r\n\r\nexport default budgetProvider"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}