{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\Robotgeek\\\\Documents\\\\GitHub\\\\MoneyTracker\\\\my-money-tracker\\\\src\\\\components\\\\MasterProvider.js\",\n  _s2 = $RefreshSig$();\nimport MasterContext from '../contexts/MasterContext';\nimport React, { useState, useEffect, useContext, useCallback } from \"react\";\nimport axios from 'axios';\nimport moment from 'moment';\nimport { Prev } from 'react-bootstrap/esm/PageItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MasterProvider(_ref) {\n  _s2();\n  var _s = $RefreshSig$();\n  let {\n    children\n  } = _ref;\n  const [CategoryList, setCategoryList] = useState([]);\n  const storedUserID = parseInt(sessionStorage.getItem('userID'));\n  console.log(storedUserID);\n  const storedEmail = sessionStorage.getItem('email');\n  const storedName = sessionStorage.getItem('name');\n  const storedSurname = sessionStorage.getItem('surname');\n  const storedIsLoggedIn = JSON.parse(sessionStorage.getItem('isLoggedIn'));\n  const [IncomeList, setIncomeList] = useState([]);\n  const [ExpenditureList, setExpenditureList] = useState([]);\n  const [Error, setError] = useState(null);\n  const UserID = parseInt(sessionStorage.getItem(\"userID\"));\n  const [IncomeID, setIncomeID] = useState();\n  const formattedDate = moment().format('YYYY-MM-DD');\n  const categoryCount = useState(0);\n  const Category = {\n    name: String,\n    userid: storedUserID,\n    limita: Number,\n    tip: Boolean,\n    transactions: []\n  };\n  useEffect(() => {\n    fetch(`http://localhost:8080/api/v1/kategorija/getbyuserid/${storedUserID}`).then(res => {\n      return res.json();\n    }).then(async data => {\n      if (Array.isArray(data)) {\n        for (let category of data) {\n          const rez = await axios.get(`http://localhost:8080/api/v1/kategorija/vsiprihodi/${category.id}`);\n          if (rez.status === 200) {\n            category.transactions = rez.data;\n            console.log(category.id);\n          }\n        }\n        updateCList(data);\n        categoryCount++;\n      } else {\n        console.warn('Received non-array data:', data);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching transaction data:\", error);\n    });\n  }, [storedUserID]);\n  const updateCList = newCList => {\n    setCategoryList(newCList);\n  };\n  const addCategory = async (name, limita, tip) => {\n    console.log('addCategory function called with:', name, limita, tip, storedUserID);\n    try {\n      const newCategory = {\n        name: name,\n        userid: storedUserID,\n        limita: limita,\n        tip: tip,\n        transactions: []\n      };\n      const response = await axios.post('http://localhost:8080/api/v1/kategorija/add', newCategory);\n      if (response.status === 200) {\n        console.log(response);\n        console.log(newCategory);\n        console.log(CategoryList);\n        setCategoryList(CategoryList => [...CategoryList, newCategory]);\n        ;\n        categoryCount++;\n      }\n    } catch (error) {\n      console.error(\"error adding Category\", error);\n    }\n  };\n  useEffect(() => {\n    const getIncomes = async () => {\n      try {\n        const res = await fetch(`http://localhost:8080/api/v1/prihod/userid/${UserID}`);\n        if (!res.ok) {\n          throw new Error('could not fetch data');\n        }\n        const data = await res.json();\n        console.log(data);\n        setIncomeList(data);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getIncomes();\n  }, [UserID]);\n  useEffect(() => {\n    const getExpenditures = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/api/v1/odhod/userid/${UserID}`);\n        if (!response.ok) {\n          throw new Error('could not fetch data');\n        }\n        const data = await response.json();\n        console.log(data);\n        setExpenditureList(data);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getExpenditures();\n  }, [UserID]);\n  function GetIncomeByID(_ref2) {\n    _s();\n    let {\n      Incomeid\n    } = _ref2;\n    const [incomeData, setIncomeData] = useState(null);\n    const [error, setError] = useState(null);\n    const GetIncomeByID = async Incomeid => {\n      try {\n        console.log(\"PoÅ¡iulja?\" + Incomeid);\n        const res = await axios.get(`http://localhost:8080/api/v1/prihod/${Incomeid}`);\n        if (res.status === 200) {\n          setIncomeData(res.data);\n        }\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    useEffect(() => {\n      GetIncomeByID(Incomeid);\n    }, [Incomeid]);\n    if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 31\n    }, this);\n    if (!incomeData) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 37\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: incomeData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }, this);\n  }\n  _s(GetIncomeByID, \"4wTC8YOZH1T5RomTx0dx2VbhnzQ=\");\n  const addIncome = useCallback(async (name, kategorijaid, value) => {\n    console.log(\"function called\");\n    const Income = {\n      date: formattedDate,\n      kategorijaidprihod: kategorijaid,\n      name: name,\n      useridprihod: UserID,\n      value: value\n    };\n    setIncomeList(prevIncomeList => [...prevIncomeList, Income]);\n    updateIList(IncomeList);\n    console.log(\"NIER\", kategorijaid, Income.kategorijaidprihod);\n    try {\n      const response = await axios.post('http://localhost:8080/api/v1/prihod', Income, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(response.data);\n      if (response.status === 200) {\n        console.log('Income added Successfully');\n        const newIncomeID = response.data;\n        console.log(response.data.id);\n        const res = await axios.post(`http://localhost:8080/api/v1/kategorija/addprihod/${Income.kategorijaidprihod}/${newIncomeID}`, {\n          kategorijaid: Income.kategorijaidprihod,\n          id: newIncomeID\n        });\n        console.log('PrihodID' + newIncomeID);\n        console.log(res.data);\n        if (res.status === 200) {\n          console.log('Income added successfully to category');\n        }\n      }\n    } catch (err) {\n      console.error('Error adding Income', err);\n    }\n  }, [UserID]);\n  const addExpenditure = useCallback(async (name, kategorijaid, value) => {\n    const Expenditure = {\n      name: name,\n      kategorijaidodhod: kategorijaid,\n      date: formattedDate,\n      useridodhod: UserID,\n      value: value\n    };\n    setExpenditureList(prevExpenditureList => [...prevExpenditureList, Expenditure]);\n    updateEList(ExpenditureList);\n    console.log(\"KategorijaID Odhod:\" + Expenditure.kategorijaidodhod);\n    try {\n      const response = await axios.post('http://localhost:8080/api/v1/odhod', Expenditure);\n      console.log(response.data);\n      if (response.status === 200) {\n        console.log('Expenditure added Successfully');\n        const newExpenditureID = response.data;\n        console.log('OdhodID' + newExpenditureID);\n        const res = await axios.post(`/addprihod/${Expenditure.kategorijaidodhod}/${Expenditure.id}`, {\n          kategorijaid: Expenditure.kategorijaidodhod,\n          id: newExpenditureID\n        });\n        console.log(Expenditure.id);\n        console.log(res.data);\n        if (res.status === 200) {\n          console.log('Expenditure added successfully to category');\n        }\n      }\n    } catch (error) {\n      console.error('Error adding Expenditure', error);\n    }\n  }, [UserID]);\n\n  /*       const providePrihodi = async( kategorijaid ) => {\r\n             try{\r\n                   const responser = await axios.get(`http://localhost:8080/api/v1/kategorija/vsiprihodi/${kategorijaid}`)\r\n                 console.log(responser)\r\n                 return responser.data\r\n             }\r\n             catch (error) {\r\n                 console.log(\"problem with getting transactions\", error)\r\n             }\r\n         }\r\n     const provideOdhodi = async( kategorijaid ) => {\r\n       try{\r\n          const responser = await axios.get(`http://localhost:8080/api/v1/kategorija/vsiodhodi/${kategorijaid}`)\r\n        console.log(responser.data)\r\n        return responser.data\r\n                 \r\n                 \r\n      }\r\n       catch (error) {\r\n                 console.error(\"problem with getting transactions\", error)\r\n     }\r\n  };\r\n    const shapePrihodi = async (prihodid) => {\r\n     try{\r\n         const response = await axios.get(`http://localhost:8080/api/v1/prihod/${prihodid}`);\r\n         return response.data;\r\n       } catch {\r\n         console.log(\"Error fetching prihod details\", error)\r\n     }\r\n      }\r\n      const getSpecificPrihodi = async (kategorijaid) => {\r\n     const prihodIDArray = await providePrihodi(kategorijaid)\r\n       const prihodArray = await Promise.all(prihodIDArray.map(async (prihodID) => {\r\n         return await shapePrihodi(prihodID)\r\n     }))\r\n       console.log(prihodArray)\r\n  }*/\n\n  const updateIList = newTList => {\n    setIncomeList(newTList);\n  };\n  const updateEList = newEList => {\n    setExpenditureList(newEList);\n  };\n  return /*#__PURE__*/_jsxDEV(MasterContext.Provider, {\n    value: {\n      CategoryList,\n      GetIncomeByID,\n      setCategoryList,\n      addCategory,\n      updateCList,\n      IncomeList,\n      ExpenditureList,\n      addIncome,\n      addExpenditure,\n      updateEList,\n      updateIList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 9\n  }, this);\n}\n_s2(MasterProvider, \"wwrDAFdz2DGI0VeGyt18L6uC3WY=\");\n_c = MasterProvider;\nexport default MasterProvider;\nvar _c;\n$RefreshReg$(_c, \"MasterProvider\");","map":{"version":3,"names":["MasterContext","React","useState","useEffect","useContext","useCallback","axios","moment","Prev","jsxDEV","_jsxDEV","MasterProvider","_ref","_s2","_s","$RefreshSig$","children","CategoryList","setCategoryList","storedUserID","parseInt","sessionStorage","getItem","console","log","storedEmail","storedName","storedSurname","storedIsLoggedIn","JSON","parse","IncomeList","setIncomeList","ExpenditureList","setExpenditureList","Error","setError","UserID","IncomeID","setIncomeID","formattedDate","format","categoryCount","Category","name","String","userid","limita","Number","tip","Boolean","transactions","fetch","then","res","json","data","Array","isArray","category","rez","get","id","status","updateCList","warn","catch","error","newCList","addCategory","newCategory","response","post","getIncomes","ok","message","getExpenditures","GetIncomeByID","_ref2","Incomeid","incomeData","setIncomeData","fileName","_jsxFileName","lineNumber","columnNumber","addIncome","kategorijaid","value","Income","date","kategorijaidprihod","useridprihod","prevIncomeList","updateIList","headers","newIncomeID","err","addExpenditure","Expenditure","kategorijaidodhod","useridodhod","prevExpenditureList","updateEList","newExpenditureID","newTList","newEList","Provider","_c","$RefreshReg$"],"sources":["D:/Users/Robotgeek/Documents/GitHub/MoneyTracker/my-money-tracker/src/components/MasterProvider.js"],"sourcesContent":["import MasterContext from '../contexts/MasterContext'\r\nimport React, { useState, useEffect, useContext, useCallback } from \"react\"\r\nimport axios from 'axios'\r\nimport moment from 'moment';\r\nimport { Prev } from 'react-bootstrap/esm/PageItem';\r\n\r\n\r\nfunction MasterProvider ({ children }) {\r\n    const [CategoryList, setCategoryList] = useState([]);\r\n    const storedUserID = parseInt(sessionStorage.getItem('userID'));\r\n    console.log(storedUserID)\r\n    const storedEmail = sessionStorage.getItem('email');\r\n    const storedName = sessionStorage.getItem('name');\r\n    const storedSurname = sessionStorage.getItem('surname');\r\n    const storedIsLoggedIn = JSON.parse(sessionStorage.getItem('isLoggedIn'));\r\n    const [IncomeList, setIncomeList] = useState([]);\r\n    const [ExpenditureList, setExpenditureList] =  useState([]);\r\n    const [Error, setError] = useState(null)\r\n    const UserID = parseInt(sessionStorage.getItem(\"userID\"))\r\n    const [IncomeID, setIncomeID] = useState()\r\n    const formattedDate = moment().format('YYYY-MM-DD');\r\n    const categoryCount = useState(0)\r\n    const Category = {\r\n      name: String,\r\n      userid: storedUserID,\r\n      limita: Number,\r\n      tip: Boolean,\r\n      transactions: []\r\n    }\r\n\r\n  \r\n    useEffect(() => {\r\n      fetch(`http://localhost:8080/api/v1/kategorija/getbyuserid/${storedUserID}`)\r\n      .then((res) => {\r\n          return res.json();\r\n      })\r\n      .then(async (data) => {\r\n          if (Array.isArray(data)) {\r\n              for (let category of data) {\r\n                  const rez = await axios.get(`http://localhost:8080/api/v1/kategorija/vsiprihodi/${category.id}`);\r\n                  if (rez.status === 200) {\r\n                      category.transactions = rez.data; \r\n                      console.log(category.id)\r\n                  }\r\n              }\r\n              updateCList(data);\r\n              categoryCount++\r\n          } else {\r\n              console.warn('Received non-array data:', data);\r\n          }\r\n      })\r\n      .catch((error) => {\r\n          console.error(\"Error fetching transaction data:\", error);\r\n      });\r\n    }, [storedUserID]);\r\n    \r\n\r\n    \r\n    const updateCList = (newCList) => {\r\n        setCategoryList(newCList);\r\n    };\r\n\r\n\r\n\r\n    const addCategory = async (name, limita, tip) => {\r\n      console.log('addCategory function called with:', name, limita, tip, storedUserID);\r\n        try {\r\n          const newCategory = {\r\n            name: name,\r\n            userid: storedUserID,\r\n            limita: limita,\r\n            tip: tip,\r\n            transactions: []\r\n          }\r\n          const response = await axios.post('http://localhost:8080/api/v1/kategorija/add',  newCategory );\r\n          if (response.status === 200) {\r\n            \r\n            console.log(response);\r\n            console.log(newCategory)\r\n            console.log(CategoryList)\r\n            setCategoryList(CategoryList => [...CategoryList, newCategory]);;\r\n            categoryCount++\r\n          }\r\n        } catch (error) {\r\n          console.error(\"error adding Category\", error);\r\n        }\r\n      };\r\n\r\n\r\n\r\n      useEffect(() => {\r\n        const getIncomes = async () => {\r\n            try {\r\n                const res = await fetch(`http://localhost:8080/api/v1/prihod/userid/${UserID}`)\r\n                if (!res.ok) {\r\n                    throw new Error('could not fetch data')\r\n                }\r\n                const data = await res.json();\r\n                console.log(data)\r\n                setIncomeList(data)\r\n            } catch (error) {\r\n                setError(error.message);\r\n            }\r\n        };\r\n        getIncomes();\r\n        }, [UserID])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const getExpenditures = async () =>{\r\n            \ttry{\r\n                    const response = await fetch(`http://localhost:8080/api/v1/odhod/userid/${UserID}`)\r\n                    if (!response.ok) {\r\n                        throw new Error('could not fetch data')\r\n                    }\r\n                    const data = await response.json();\r\n                    console.log(data)\r\n                    setExpenditureList(data)\r\n\r\n                } catch (error) {\r\n                    setError(error.message);\r\n                }\r\n            };\r\n            getExpenditures();\r\n        }, [UserID])\r\n\r\n\r\n        function GetIncomeByID ({ Incomeid }) {\r\n            const [incomeData, setIncomeData] = useState(null);\r\n            const [error, setError] = useState(null);\r\n        \r\n            const GetIncomeByID = async (Incomeid) => {\r\n                try {\r\n                    console.log(\"PoÅ¡iulja?\" + Incomeid);\r\n                    const res = await axios.get(`http://localhost:8080/api/v1/prihod/${Incomeid}`);\r\n                    if (res.status === 200) {\r\n                        setIncomeData(res.data);\r\n                    }\r\n                } catch (error) {\r\n                    setError(error.message);\r\n                }\r\n            };\r\n        \r\n            useEffect(() => {\r\n                GetIncomeByID(Incomeid);\r\n            }, [Incomeid]);\r\n        \r\n            if (error) return <div>Error: {error}</div>;\r\n            if (!incomeData) return <div>Loading...</div>;\r\n        \r\n            return (\r\n                <ul>\r\n                    <li>{incomeData.name}</li>\r\n                </ul>\r\n            );\r\n        }\r\n        \r\n\r\n\r\n        const addIncome = useCallback(async (name, kategorijaid, value) => {\r\n            console.log(\"function called\")\r\n            const Income = {\r\n                date: formattedDate,\r\n                kategorijaidprihod: kategorijaid,\r\n                name: name,\r\n                useridprihod: UserID,\r\n                value: value,\r\n            };\r\n            setIncomeList(prevIncomeList => [...prevIncomeList, Income])\r\n            updateIList(IncomeList)\r\n            console.log(\"NIER\", kategorijaid, Income.kategorijaidprihod)\r\n            \r\n            try {\r\n                \r\n                const response = await axios.post('http://localhost:8080/api/v1/prihod', Income ,{  headers: {\r\n                    'Content-Type': 'application/json'\r\n                }});\r\n                console.log(response.data);\r\n        \r\n                if (response.status === 200) {\r\n                    console.log('Income added Successfully');\r\n                    const newIncomeID = response.data;\r\n                    console.log(response.data.id)\r\n                    const res = await axios.post(`http://localhost:8080/api/v1/kategorija/addprihod/${Income.kategorijaidprihod}/${newIncomeID}`, { kategorijaid: Income.kategorijaidprihod, id: newIncomeID });\r\n                    console.log('PrihodID' + newIncomeID)\r\n                    console.log(res.data);\r\n                    if (res.status === 200) {\r\n                        console.log('Income added successfully to category');\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.error('Error adding Income', err);\r\n            }\r\n        }, [UserID]);\r\n\r\n\r\n\r\n            const addExpenditure = useCallback(async( name, kategorijaid, value) =>{\r\n                const Expenditure = {\r\n                    name: name,\r\n                    kategorijaidodhod: kategorijaid,\r\n                    date: formattedDate,\r\n                    useridodhod: UserID,\r\n                    value: value,\r\n                }\r\n                setExpenditureList(prevExpenditureList => [...prevExpenditureList, Expenditure])\r\n                updateEList(ExpenditureList)\r\n                console.log(\"KategorijaID Odhod:\" + Expenditure.kategorijaidodhod)\r\n                try {\r\n                    const response = await axios.post('http://localhost:8080/api/v1/odhod', Expenditure);\r\n                    console.log(response.data);\r\n            \r\n                    if (response.status === 200) {\r\n                        console.log('Expenditure added Successfully');\r\n                        const newExpenditureID = response.data\r\n                        console.log('OdhodID' + newExpenditureID)\r\n                        const res = await axios.post(`/addprihod/${Expenditure.kategorijaidodhod}/${Expenditure.id}`, { kategorijaid: Expenditure.kategorijaidodhod, id: newExpenditureID });\r\n                        console.log(Expenditure.id)\r\n                        console.log(res.data);\r\n\r\n                        if (res.status === 200) {\r\n                            console.log('Expenditure added successfully to category');\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error adding Expenditure', error);\r\n                }\r\n            }, [UserID]);\r\n\r\n         /*       const providePrihodi = async( kategorijaid ) => {\r\n                    try{\r\n\r\n                        const responser = await axios.get(`http://localhost:8080/api/v1/kategorija/vsiprihodi/${kategorijaid}`)\r\n                        console.log(responser)\r\n                        return responser.data\r\n                    }\r\n                    catch (error) {\r\n                        console.log(\"problem with getting transactions\", error)\r\n                    }\r\n                }\r\n\r\n          const provideOdhodi = async( kategorijaid ) => {\r\n              try{\r\n\r\n               const responser = await axios.get(`http://localhost:8080/api/v1/kategorija/vsiodhodi/${kategorijaid}`)\r\n               console.log(responser.data)\r\n               return responser.data\r\n                        \r\n                        \r\n             }\r\n              catch (error) {\r\n                        console.error(\"problem with getting transactions\", error)\r\n            }\r\n         };\r\n\r\n         const shapePrihodi = async (prihodid) => {\r\n            try{\r\n                const response = await axios.get(`http://localhost:8080/api/v1/prihod/${prihodid}`);\r\n                return response.data;\r\n\r\n            } catch {\r\n                console.log(\"Error fetching prihod details\", error)\r\n            }\r\n\r\n\r\n         }\r\n\r\n\r\n         const getSpecificPrihodi = async (kategorijaid) => {\r\n            const prihodIDArray = await providePrihodi(kategorijaid)\r\n\r\n            const prihodArray = await Promise.all(prihodIDArray.map(async (prihodID) => {\r\n                return await shapePrihodi(prihodID)\r\n            }))\r\n\r\n            console.log(prihodArray)\r\n         }*/\r\n\r\n  \r\n\r\n\r\n\r\n                \r\n\r\n\r\n\r\n    const updateIList = (newTList) => {\r\n        setIncomeList(newTList);\r\n    };\r\n    const updateEList = (newEList) => {\r\n        setExpenditureList(newEList)\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <MasterContext.Provider value={{CategoryList, GetIncomeByID , setCategoryList, addCategory, updateCList, IncomeList, ExpenditureList, addIncome, addExpenditure, updateEList, updateIList }}>\r\n            {children}\r\n        </MasterContext.Provider>\r\n    )\r\n\r\n}\r\n\r\nexport default MasterProvider "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}