{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\Robotgeek\\\\Documents\\\\GitHub\\\\MoneyTracker\\\\my-money-tracker\\\\src\\\\components\\\\TransactionsProvider.js\",\n  _s = $RefreshSig$();\nimport TransactionsContext from '../contexts/TransactionsContext';\nimport React, { useState, useEffect, useContext, useCallback } from \"react\";\nimport { LoginContext } from './LoginProvider';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TransactionsProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [IncomeList, setIncomeList] = useState([]);\n  const [ExpenditureList, setExpenditureList] = useState([]);\n  const [Error, setError] = useState(null);\n  const UserID = parseInt(sessionStorage.getItem(\"userID\"));\n  const [incomeID, setIncomeID] = useState();\n  useEffect(() => {\n    const getIncomes = async () => {\n      try {\n        const res = await fetch(`http://localhost:8080/api/v1/prihod/getbyuserid/${UserID}`);\n        if (!res.ok) {\n          throw new Error('could not fetch data');\n        }\n        const data = await res.json();\n        console.log(data);\n        setIncomeList(data);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getIncomes();\n  }, []);\n  useEffect(() => {\n    const getExpenditures = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/api/v1/odhod/getbyuserid/${UserID}`);\n        if (!response.ok) {\n          throw new Error('could not fetch data');\n        }\n        const data = await response.json();\n        console.log(data);\n        setExpenditureList(data);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getExpenditures();\n  }, []);\n  const addIncome = useCallback(async (name, kategorijaid, useridprihod, date, value) => {\n    const Income = {\n      name: name,\n      kategorijaidprihod: kategorijaid,\n      useridprihod: useridprihod,\n      date: date,\n      value: value,\n      userid: UserID\n    };\n    try {\n      await axios.post(`api/v1/prihod`, Income).then(response => {\n        console.log(response.data);\n        setIncomeID(response.data.id);\n        if (response.status === 200) {\n          console.log(\"Income added Successfully\");\n        }\n      });\n      await axios.post(`/addprihod/${kategorijaid}/${incomeID}`, kategorijaid, incomeID).then(res => {\n        console.log(res.data);\n        if (res.status === 200) {\n          console.log(\"Income added successfuly to category\");\n        }\n      });\n    } catch (err) {\n      console.error('Error adding Income', err);\n    }\n  }, [UserID]);\n  const addExpenditure = useCallback(async (name, kategorijaid, useridodhod, value) => {\n    const Expenditure = {\n      name: name,\n      kategorijaid: kategorijaid,\n      user: useridodhod,\n      value: value,\n      userid: UserID\n    };\n    try {\n      await axios.post(`api/v1/prihod`, Expenditure).then(response => {\n        console.log(response.data);\n        if (response.status === 200) {\n          console.log(\"Income added Successfully\");\n        }\n      });\n      await axios.post(`/addodhod/${kategorijaid}/${incomeID}`, kategorijaid, incomeID).then(res => {\n        console.log(res.data);\n        if (res.status === 200) {\n          console.log(\"Expenditure added successfuly to category\");\n        }\n      });\n    } catch (err) {\n      console.error('Error adding Expenditure', err);\n    }\n  }, [UserID]);\n  const updateIList = newTList => {\n    setIncomeList(newTList);\n  };\n  const updateEList = newEList => {\n    setExpenditureList(newEList);\n  };\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: {\n      IncomeList,\n      ExpenditureList,\n      addIncome,\n      addExpenditure,\n      updateEList,\n      updateIList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n}\n_s(TransactionsProvider, \"ABAZ+u9sO7zzPbzBYFEilV5avZo=\");\n_c = TransactionsProvider;\nexport default TransactionsProvider;\nvar _c;\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"names":["TransactionsContext","React","useState","useEffect","useContext","useCallback","LoginContext","axios","jsxDEV","_jsxDEV","TransactionsProvider","_ref","_s","children","IncomeList","setIncomeList","ExpenditureList","setExpenditureList","Error","setError","UserID","parseInt","sessionStorage","getItem","incomeID","setIncomeID","getIncomes","res","fetch","ok","data","json","console","log","error","message","getExpenditures","response","addIncome","name","kategorijaid","useridprihod","date","value","Income","kategorijaidprihod","userid","post","then","id","status","err","addExpenditure","useridodhod","Expenditure","user","updateIList","newTList","updateEList","newEList","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Users/Robotgeek/Documents/GitHub/MoneyTracker/my-money-tracker/src/components/TransactionsProvider.js"],"sourcesContent":["import TransactionsContext from '../contexts/TransactionsContext'\r\nimport React, { useState, useEffect, useContext, useCallback } from \"react\"\r\nimport { LoginContext } from './LoginProvider';\r\nimport axios from 'axios';\r\n\r\nfunction TransactionsProvider({ children }) {\r\n    const [IncomeList, setIncomeList] = useState([]);\r\n    const [ExpenditureList, setExpenditureList] =  useState([]);\r\n    const [Error, setError] = useState(null)\r\n    const UserID = parseInt(sessionStorage.getItem(\"userID\"))\r\n    const [incomeID, setIncomeID] = useState()\r\n\r\n    useEffect(() => {\r\n        const getIncomes = async () => {\r\n            try {\r\n                const res = await fetch(`http://localhost:8080/api/v1/prihod/getbyuserid/${UserID}`)\r\n                if (!res.ok) {\r\n                    throw new Error('could not fetch data')\r\n                }\r\n                const data = await res.json();\r\n                console.log(data)\r\n                setIncomeList(data)\r\n            } catch (error) {\r\n                setError(error.message);\r\n            }\r\n        };\r\n        getIncomes();\r\n        }, [])\r\n    useEffect(() => {\r\n        const getExpenditures = async () =>{\r\n            \ttry{\r\n                    const response = await fetch(`http://localhost:8080/api/v1/odhod/getbyuserid/${UserID}`)\r\n                    if (!response.ok) {\r\n                        throw new Error('could not fetch data')\r\n                    }\r\n                    const data = await response.json();\r\n                    console.log(data)\r\n                    setExpenditureList(data)\r\n\r\n                } catch (error) {\r\n                    setError(error.message);\r\n                }\r\n            };\r\n            getExpenditures();\r\n        }, [])\r\n            const addIncome = useCallback(async(name, kategorijaid, useridprihod, date, value) =>{\r\n                const Income = {\r\n                    name: name,\r\n                    kategorijaidprihod: kategorijaid,\r\n                    useridprihod: useridprihod,\r\n                    date: date,\r\n                    value: value,\r\n                    userid: UserID\r\n                }\r\n                try {\r\n                    await axios.post(`api/v1/prihod`, Income)\r\n                    .then(response => {\r\n                        console.log(response.data)\r\n                        setIncomeID(response.data.id)\r\n                        if (response.status === 200){\r\n                            console.log(\"Income added Successfully\")\r\n                        }\r\n                    })\r\n                    await axios.post(`/addprihod/${kategorijaid}/${incomeID}`, kategorijaid, incomeID )\r\n                    .then(res => {\r\n                        console.log(res.data)\r\n                        if(res.status ===200){\r\n                            console.log(\"Income added successfuly to category\")\r\n                        }\r\n                    })\r\n                }   \r\n                catch (err) {\r\n                    console.error('Error adding Income', err)\r\n                }\r\n            }\r\n            , [UserID])\r\n            const addExpenditure = useCallback(async( name, kategorijaid, useridodhod, value) =>{\r\n                const Expenditure = {\r\n                    name: name,\r\n                    kategorijaid: kategorijaid,\r\n                    user: useridodhod,\r\n                    value: value,\r\n                    userid: UserID\r\n                }\r\n                try {\r\n                    await axios.post(`api/v1/prihod`, Expenditure)\r\n                    .then(response => {\r\n                        console.log(response.data)\r\n                        if (response.status === 200){\r\n                            console.log(\"Income added Successfully\")\r\n                        }\r\n                    })\r\n                    await axios.post(`/addodhod/${kategorijaid}/${incomeID}`, kategorijaid, incomeID )\r\n                    .then(res => {\r\n                        console.log(res.data)\r\n                        if(res.status ===200){\r\n                            console.log(\"Expenditure added successfuly to category\")\r\n                        }\r\n                    })\r\n                }   \r\n                catch (err) {\r\n                    console.error('Error adding Expenditure', err)\r\n                }\r\n            }\r\n            , [UserID])\r\n\r\n\r\n\r\n\r\n    const updateIList = (newTList) => {\r\n        setIncomeList(newTList);\r\n    };\r\n    const updateEList = (newEList) => {\r\n        setExpenditureList(newEList)\r\n    }\r\n    return (\r\n        <TransactionsContext.Provider value={{IncomeList, ExpenditureList, addIncome, addExpenditure, updateEList, updateIList }}>\r\n            {children}\r\n        </TransactionsContext.Provider>\r\n    )\r\n}\r\n\r\nexport default TransactionsProvider\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}