{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\Robotgeek\\\\Documents\\\\GitHub\\\\MoneyTracker\\\\my-money-tracker\\\\src\\\\components\\\\CategoryProvider.js\",\n  _s = $RefreshSig$();\nimport CategoryContext from \"../contexts/CategoryContext\";\nimport React, { useState, useEffect } from \"react\";\nimport { useContext } from \"react\";\nimport { LoginContext } from \"./LoginProvider\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CategoryProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [CategoryList, setCategoryList] = useState([]);\n  const storedUserID = parseInt(sessionStorage.getItem('userID'));\n  console.log(storedUserID);\n  const storedEmail = sessionStorage.getItem('email');\n  const storedName = sessionStorage.getItem('name');\n  const storedSurname = sessionStorage.getItem('surname');\n  const storedIsLoggedIn = JSON.parse(sessionStorage.getItem('isLoggedIn'));\n  const Category = {\n    name: String,\n    userId: storedUserID,\n    limita: Number,\n    tip: Boolean,\n    transactions: []\n  };\n  useEffect(() => {\n    fetch(`http://localhost:8080/api/v1/kategorija/getbyuserid/${storedUserID}`).then(res => {\n      return res.json();\n    }).then(async data => {\n      if (Array.isArray(data)) {\n        for (let category of data) {\n          const rez = await axios.get(`http://localhost:8080/api/v1/kategorija/vsiprihodi/${category.id}`);\n          if (rez.status === 200) {\n            category.transactions = rez.data;\n          }\n        }\n        updateCList(data);\n      } else {\n        console.warn('Received non-array data:', data);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching transaction data:\", error);\n    });\n  }, [storedUserID]);\n  const updateCList = newCList => {\n    setCategoryList(newCList);\n  };\n  const addCategory = async (name, limita, tip) => {\n    console.log('addCategory function called with:', name, limita, tip, storedUserID);\n    try {\n      const newCategory = {\n        name,\n        userId: storedUserID,\n        limita,\n        tip,\n        transactions: []\n      };\n      const response = await axios.post('http://localhost:8080/api/v1/kategorija/add', newCategory);\n      if (response.status === 200) {\n        console.log(response);\n        console.log(newCategory);\n        console.log(CategoryList);\n        setCategoryList(CategoryList => [...CategoryList, newCategory]);\n        ;\n      }\n    } catch (error) {\n      console.error(\"error adding Category\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CategoryContext.Provider, {\n    value: {\n      CategoryList,\n      addCategory,\n      updateCList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n  /*const addTransaction = (categoryId, name, value) => {\r\n      // API call to add transaction\r\n      // For now, we'll mock the API call\r\n      const updatedCategories = categories.map(category => {\r\n        if (category.id === categoryId) {\r\n          const newTransaction = {\r\n            id: category.transactions.length + 1,\r\n            name,\r\n            value,\r\n            userId,\r\n            categoryId\r\n          };\r\n          category.transactions.push(newTransaction);\r\n        }\r\n        return category;\r\n      });\r\n      setCategories(updatedCategories);\r\n      setShowTransactionModal(false);\r\n    };*/\n}\n_s(CategoryProvider, \"5jlr0NTYZO8B5wAnOALGeJE6OOE=\");\n_c = CategoryProvider;\nexport default CategoryProvider;\nvar _c;\n$RefreshReg$(_c, \"CategoryProvider\");","map":{"version":3,"names":["CategoryContext","React","useState","useEffect","useContext","LoginContext","axios","jsxDEV","_jsxDEV","CategoryProvider","_ref","_s","children","CategoryList","setCategoryList","storedUserID","parseInt","sessionStorage","getItem","console","log","storedEmail","storedName","storedSurname","storedIsLoggedIn","JSON","parse","Category","name","String","userId","limita","Number","tip","Boolean","transactions","fetch","then","res","json","data","Array","isArray","category","rez","get","id","status","updateCList","warn","catch","error","newCList","addCategory","newCategory","response","post","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Users/Robotgeek/Documents/GitHub/MoneyTracker/my-money-tracker/src/components/CategoryProvider.js"],"sourcesContent":["import CategoryContext from \"../contexts/CategoryContext\";\r\nimport React, { useState, useEffect } from \"react\"\r\nimport { useContext } from \"react\";\r\nimport { LoginContext } from \"./LoginProvider\";\r\nimport axios from 'axios'\r\n\r\nfunction CategoryProvider({ children }) {\r\n    const [CategoryList, setCategoryList] = useState([]);\r\n    const storedUserID = parseInt(sessionStorage.getItem('userID'));\r\n    console.log(storedUserID)\r\n    const storedEmail = sessionStorage.getItem('email');\r\n    const storedName = sessionStorage.getItem('name');\r\n    const storedSurname = sessionStorage.getItem('surname');\r\n    const storedIsLoggedIn = JSON.parse(sessionStorage.getItem('isLoggedIn'));\r\n    const Category = {\r\n      name: String,\r\n      userId: storedUserID,\r\n      limita: Number,\r\n      tip: Boolean,\r\n      transactions: []\r\n    }\r\n\r\n  \r\n    useEffect(() => {\r\n      fetch(`http://localhost:8080/api/v1/kategorija/getbyuserid/${storedUserID}`)\r\n      .then((res) => {\r\n          return res.json();\r\n      })\r\n      .then(async (data) => {\r\n          if (Array.isArray(data)) {\r\n              for (let category of data) {\r\n                  const rez = await axios.get(`http://localhost:8080/api/v1/kategorija/vsiprihodi/${category.id}`);\r\n                  if (rez.status === 200) {\r\n                      category.transactions = rez.data; \r\n                  }\r\n              }\r\n              updateCList(data);\r\n          } else {\r\n              console.warn('Received non-array data:', data);\r\n          }\r\n      })\r\n      .catch((error) => {\r\n          console.error(\"Error fetching transaction data:\", error);\r\n      });\r\n    }, [storedUserID]);\r\n    \r\n\r\n    const updateCList = (newCList) => {\r\n        setCategoryList(newCList);\r\n    };\r\n\r\n    const addCategory = async (name, limita, tip) => {\r\n      console.log('addCategory function called with:', name, limita, tip, storedUserID);\r\n        try {\r\n          const newCategory = {\r\n            name,\r\n            userId: storedUserID,\r\n            limita,\r\n            tip,\r\n            transactions: []\r\n          }\r\n          const response = await axios.post('http://localhost:8080/api/v1/kategorija/add',  newCategory );\r\n          if (response.status === 200) {\r\n            console.log(response);\r\n            console.log(newCategory)\r\n            console.log(CategoryList)\r\n            setCategoryList(CategoryList => [...CategoryList, newCategory]);;\r\n          }\r\n        } catch (error) {\r\n          console.error(\"error adding Category\", error);\r\n        }\r\n      };\r\n\r\n    \r\n\r\n    return (\r\n        <CategoryContext.Provider value={{CategoryList, addCategory, updateCList }}>\r\n            {children}\r\n        </CategoryContext.Provider>\r\n    )\r\n    /*const addTransaction = (categoryId, name, value) => {\r\n        // API call to add transaction\r\n        // For now, we'll mock the API call\r\n        const updatedCategories = categories.map(category => {\r\n          if (category.id === categoryId) {\r\n            const newTransaction = {\r\n              id: category.transactions.length + 1,\r\n              name,\r\n              value,\r\n              userId,\r\n              categoryId\r\n            };\r\n            category.transactions.push(newTransaction);\r\n          }\r\n          return category;\r\n        });\r\n        setCategories(updatedCategories);\r\n        setShowTransactionModal(false);\r\n      };*/\r\n}\r\n\r\nexport default CategoryProvider\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}