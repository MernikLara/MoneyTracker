{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\Robotgeek\\\\Documents\\\\GitHub\\\\MoneyTracker\\\\my-money-tracker\\\\src\\\\components\\\\MasterProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport MasterContext from '../contexts/MasterContext';\nimport React, { useState, useEffect, useContext, useCallback } from \"react\";\nimport axios from 'axios';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GetIncomeByID(props) {\n  _s();\n  const [incomeData, setIncomeData] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const res = await axios.get(`http://localhost:8080/api/v1/prihod/${props.Incomeid}`);\n        if (res.status === 200) {\n          setIncomeData(res.data);\n        }\n      } catch (error) {\n        setError(error.message);\n      }\n    }\n    fetchData();\n  }, [props.Incomeid]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      children: incomeData.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: incomeData.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: incomeData.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_s(GetIncomeByID, \"4wTC8YOZH1T5RomTx0dx2VbhnzQ=\");\n_c = GetIncomeByID;\nfunction MasterProvider(_ref) {\n  _s2();\n  let {\n    children\n  } = _ref;\n  const [CategoryList, setCategoryList] = useState([]);\n  const storedUserID = parseInt(sessionStorage.getItem('userID'));\n  console.log(storedUserID);\n  const storedEmail = sessionStorage.getItem('email');\n  const storedName = sessionStorage.getItem('name');\n  const storedSurname = sessionStorage.getItem('surname');\n  const storedIsLoggedIn = JSON.parse(sessionStorage.getItem('isLoggedIn'));\n  const [IncomeList, setIncomeList] = useState([]);\n  const [ExpenditureList, setExpenditureList] = useState([]);\n  const [Error, setError] = useState(null);\n  const UserID = parseInt(sessionStorage.getItem(\"userID\"));\n  const [IncomeID, setIncomeID] = useState();\n  const formattedDate = moment().format('YYYY-MM-DD');\n  const categoryCount = useState(0);\n  const [incomeData, setIncomeData] = useState(null);\n  const Category = {\n    name: String,\n    userid: storedUserID,\n    limita: Number,\n    tip: Boolean,\n    transactions: []\n  };\n  useEffect(() => {\n    fetch(`http://localhost:8080/api/v1/kategorija/getbyuserid/${storedUserID}`).then(res => {\n      return res.json();\n    }).then(async data => {\n      if (Array.isArray(data)) {\n        for (let category of data) {\n          const rez = await axios.get(`http://localhost:8080/api/v1/kategorija/vsiprihodi/${category.id}`);\n          if (rez.status === 200) {\n            category.transactions = rez.data;\n            console.log(category.id);\n          }\n        }\n        updateCList(data);\n        categoryCount++;\n      } else {\n        console.warn('Received non-array data:', data);\n      }\n    }).catch(error => {\n      console.error(\"Error fetching transaction data:\", error);\n    });\n  }, [storedUserID]);\n  const updateCList = newCList => {\n    setCategoryList(newCList);\n  };\n  const addCategory = async (name, limita, tip) => {\n    console.log('addCategory function called with:', name, limita, tip, storedUserID);\n    try {\n      const newCategory = {\n        name: name,\n        userid: storedUserID,\n        limita: limita,\n        tip: tip,\n        transactions: []\n      };\n      const response = await axios.post('http://localhost:8080/api/v1/kategorija/add', newCategory);\n      if (response.status === 200) {\n        console.log(response);\n        console.log(newCategory);\n        console.log(CategoryList);\n        setCategoryList(CategoryList => [...CategoryList, newCategory]);\n        ;\n        categoryCount++;\n      }\n    } catch (error) {\n      console.error(\"error adding Category\", error);\n    }\n  };\n  useEffect(() => {\n    const getIncomes = async () => {\n      try {\n        const res = await fetch(`http://localhost:8080/api/v1/prihod/userid/${UserID}`);\n        if (!res.ok) {\n          throw new Error('could not fetch data');\n        }\n        const data = await res.json();\n        console.log(data);\n        setIncomeList(data);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getIncomes();\n  }, [UserID]);\n  useEffect(() => {\n    const getExpenditures = async () => {\n      try {\n        const response = await fetch(`http://localhost:8080/api/v1/odhod/userid/${UserID}`);\n        if (!response.ok) {\n          throw new Error('could not fetch data');\n        }\n        const data = await response.json();\n        console.log(data);\n        setExpenditureList(data);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getExpenditures();\n  }, [UserID]);\n  const addIncome = useCallback(async (name, kategorijaid, value) => {\n    console.log(\"function called\");\n    const Income = {\n      date: formattedDate,\n      kategorijaidprihod: kategorijaid,\n      name: name,\n      useridprihod: UserID,\n      value: value\n    };\n    setIncomeList(prevIncomeList => [...prevIncomeList, Income]);\n    updateIList(IncomeList);\n    console.log(\"NIER\", kategorijaid, Income.kategorijaidprihod);\n    try {\n      const response = await axios.post('http://localhost:8080/api/v1/prihod', Income, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(response.data);\n      if (response.status === 200) {\n        console.log('Income added Successfully');\n        const newIncomeID = response.data;\n        console.log(response.data.id);\n        const res = await axios.post(`http://localhost:8080/api/v1/kategorija/addprihod/${Income.kategorijaidprihod}/${newIncomeID}`, {\n          kategorijaid: Income.kategorijaidprihod,\n          id: newIncomeID\n        });\n        console.log('PrihodID' + newIncomeID);\n        console.log(res.data);\n        if (res.status === 200) {\n          console.log('Income added successfully to category');\n        }\n      }\n    } catch (err) {\n      console.error('Error adding Income', err);\n    }\n  }, [UserID]);\n  const addExpenditure = useCallback(async (name, kategorijaid, value) => {\n    const Expenditure = {\n      name: name,\n      kategorijaidodhod: kategorijaid,\n      date: formattedDate,\n      useridodhod: UserID,\n      value: value\n    };\n    setExpenditureList(prevExpenditureList => [...prevExpenditureList, Expenditure]);\n    updateEList(ExpenditureList);\n    console.log(\"KategorijaID Odhod:\" + Expenditure.kategorijaidodhod);\n    try {\n      const response = await axios.post('http://localhost:8080/api/v1/odhod', Expenditure);\n      console.log(response.data);\n      if (response.status === 200) {\n        console.log('Expenditure added Successfully');\n        const newExpenditureID = response.data;\n        console.log('OdhodID' + newExpenditureID);\n        const res = await axios.post(`/addprihod/${Expenditure.kategorijaidodhod}/${Expenditure.id}`, {\n          kategorijaid: Expenditure.kategorijaidodhod,\n          id: newExpenditureID\n        });\n        console.log(Expenditure.id);\n        console.log(res.data);\n        if (res.status === 200) {\n          console.log('Expenditure added successfully to category');\n        }\n      }\n    } catch (error) {\n      console.error('Error adding Expenditure', error);\n    }\n  }, [UserID]);\n\n  /*       const providePrihodi = async( kategorijaid ) => {\r\n             try{\r\n                   const responser = await axios.get(`http://localhost:8080/api/v1/kategorija/vsiprihodi/${kategorijaid}`)\r\n                 console.log(responser)\r\n                 return responser.data\r\n             }\r\n             catch (error) {\r\n                 console.log(\"problem with getting transactions\", error)\r\n             }\r\n         }\r\n     const provideOdhodi = async( kategorijaid ) => {\r\n       try{\r\n          const responser = await axios.get(`http://localhost:8080/api/v1/kategorija/vsiodhodi/${kategorijaid}`)\r\n        console.log(responser.data)\r\n        return responser.data\r\n                 \r\n                 \r\n      }\r\n       catch (error) {\r\n                 console.error(\"problem with getting transactions\", error)\r\n     }\r\n  };\r\n    const shapePrihodi = async (prihodid) => {\r\n     try{\r\n         const response = await axios.get(`http://localhost:8080/api/v1/prihod/${prihodid}`);\r\n         return response.data;\r\n       } catch {\r\n         console.log(\"Error fetching prihod details\", error)\r\n     }\r\n      }\r\n      const getSpecificPrihodi = async (kategorijaid) => {\r\n     const prihodIDArray = await providePrihodi(kategorijaid)\r\n       const prihodArray = await Promise.all(prihodIDArray.map(async (prihodID) => {\r\n         return await shapePrihodi(prihodID)\r\n     }))\r\n       console.log(prihodArray)\r\n  }*/\n\n  const updateIList = newTList => {\n    setIncomeList(newTList);\n  };\n  const updateEList = newEList => {\n    setExpenditureList(newEList);\n  };\n  return /*#__PURE__*/_jsxDEV(MasterContext.Provider, {\n    value: {\n      CategoryList,\n      GetIncomeByID,\n      setCategoryList,\n      addCategory,\n      updateCList,\n      IncomeList,\n      ExpenditureList,\n      addIncome,\n      addExpenditure,\n      updateEList,\n      updateIList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 9\n  }, this);\n}\n_s2(MasterProvider, \"h48z1CAtSIuc3Sb8c3LAEEucX9g=\");\n_c2 = MasterProvider;\nexport default MasterProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"GetIncomeByID\");\n$RefreshReg$(_c2, \"MasterProvider\");","map":{"version":3,"names":["MasterContext","React","useState","useEffect","useContext","useCallback","axios","moment","jsxDEV","_jsxDEV","GetIncomeByID","props","_s","incomeData","setIncomeData","error","setError","fetchData","res","get","Incomeid","status","data","message","children","fileName","_jsxFileName","lineNumber","columnNumber","name","value","date","_c","MasterProvider","_ref","_s2","CategoryList","setCategoryList","storedUserID","parseInt","sessionStorage","getItem","console","log","storedEmail","storedName","storedSurname","storedIsLoggedIn","JSON","parse","IncomeList","setIncomeList","ExpenditureList","setExpenditureList","Error","UserID","IncomeID","setIncomeID","formattedDate","format","categoryCount","Category","String","userid","limita","Number","tip","Boolean","transactions","fetch","then","json","Array","isArray","category","rez","id","updateCList","warn","catch","newCList","addCategory","newCategory","response","post","getIncomes","ok","getExpenditures","addIncome","kategorijaid","Income","kategorijaidprihod","useridprihod","prevIncomeList","updateIList","headers","newIncomeID","err","addExpenditure","Expenditure","kategorijaidodhod","useridodhod","prevExpenditureList","updateEList","newExpenditureID","newTList","newEList","Provider","_c2","$RefreshReg$"],"sources":["D:/Users/Robotgeek/Documents/GitHub/MoneyTracker/my-money-tracker/src/components/MasterProvider.js"],"sourcesContent":["import MasterContext from '../contexts/MasterContext'\r\nimport React, { useState, useEffect, useContext, useCallback } from \"react\"\r\nimport axios from 'axios'\r\nimport moment from 'moment';\r\n\r\nfunction GetIncomeByID(props) {\r\n    const [incomeData, setIncomeData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                const res = await axios.get(`http://localhost:8080/api/v1/prihod/${props.Incomeid}`);\r\n                if (res.status === 200) {\r\n                    setIncomeData(res.data);\r\n                }\r\n            } catch (error) {\r\n                setError(error.message);\r\n            }\r\n        }\r\n        fetchData();\r\n    }, [props.Incomeid]);\r\n\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    }\r\n    return (\r\n        <ul>\r\n            <li>{incomeData.name}</li>\r\n            <li>{incomeData.value}</li>\r\n            <li>{incomeData.date}</li>\r\n        </ul>\r\n    );\r\n}\r\n\r\n\r\n\r\nfunction MasterProvider ({ children }) {\r\n    const [CategoryList, setCategoryList] = useState([]);\r\n    const storedUserID = parseInt(sessionStorage.getItem('userID'));\r\n    console.log(storedUserID)\r\n    const storedEmail = sessionStorage.getItem('email');\r\n    const storedName = sessionStorage.getItem('name');\r\n    const storedSurname = sessionStorage.getItem('surname');\r\n    const storedIsLoggedIn = JSON.parse(sessionStorage.getItem('isLoggedIn'));\r\n    const [IncomeList, setIncomeList] = useState([]);\r\n    const [ExpenditureList, setExpenditureList] =  useState([]);\r\n    const [Error, setError] = useState(null)\r\n    const UserID = parseInt(sessionStorage.getItem(\"userID\"))\r\n    const [IncomeID, setIncomeID] = useState()\r\n    const formattedDate = moment().format('YYYY-MM-DD');\r\n    const categoryCount = useState(0)\r\n    const [incomeData, setIncomeData] = useState(null);\r\n    const Category = {\r\n      name: String,\r\n      userid: storedUserID,\r\n      limita: Number,\r\n      tip: Boolean,\r\n      transactions: []\r\n    }\r\n\r\n  \r\n    useEffect(() => {\r\n      fetch(`http://localhost:8080/api/v1/kategorija/getbyuserid/${storedUserID}`)\r\n      .then((res) => {\r\n          return res.json();\r\n      })\r\n      .then(async (data) => {\r\n          if (Array.isArray(data)) {\r\n              for (let category of data) {\r\n                  const rez = await axios.get(`http://localhost:8080/api/v1/kategorija/vsiprihodi/${category.id}`);\r\n                  if (rez.status === 200) {\r\n                      category.transactions = rez.data; \r\n                      console.log(category.id)\r\n                  }\r\n              }\r\n              updateCList(data);\r\n              categoryCount++\r\n          } else {\r\n              console.warn('Received non-array data:', data);\r\n          }\r\n      })\r\n      .catch((error) => {\r\n          console.error(\"Error fetching transaction data:\", error);\r\n      });\r\n    }, [storedUserID]);\r\n    \r\n\r\n    \r\n    const updateCList = (newCList) => {\r\n        setCategoryList(newCList);\r\n    };\r\n\r\n\r\n\r\n    const addCategory = async (name, limita, tip) => {\r\n      console.log('addCategory function called with:', name, limita, tip, storedUserID);\r\n        try {\r\n          const newCategory = {\r\n            name: name,\r\n            userid: storedUserID,\r\n            limita: limita,\r\n            tip: tip,\r\n            transactions: []\r\n          }\r\n          const response = await axios.post('http://localhost:8080/api/v1/kategorija/add',  newCategory );\r\n          if (response.status === 200) {\r\n            \r\n            console.log(response);\r\n            console.log(newCategory)\r\n            console.log(CategoryList)\r\n            setCategoryList(CategoryList => [...CategoryList, newCategory]);;\r\n            categoryCount++\r\n          }\r\n        } catch (error) {\r\n          console.error(\"error adding Category\", error);\r\n        }\r\n      };\r\n\r\n\r\n\r\n      useEffect(() => {\r\n        const getIncomes = async () => {\r\n            try {\r\n                const res = await fetch(`http://localhost:8080/api/v1/prihod/userid/${UserID}`)\r\n                if (!res.ok) {\r\n                    throw new Error('could not fetch data')\r\n                }\r\n                const data = await res.json();\r\n                console.log(data)\r\n                setIncomeList(data)\r\n            } catch (error) {\r\n                setError(error.message);\r\n            }\r\n        };\r\n        getIncomes();\r\n        }, [UserID])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const getExpenditures = async () =>{\r\n            \ttry{\r\n                    const response = await fetch(`http://localhost:8080/api/v1/odhod/userid/${UserID}`)\r\n                    if (!response.ok) {\r\n                        throw new Error('could not fetch data')\r\n                    }\r\n                    const data = await response.json();\r\n                    console.log(data)\r\n                    setExpenditureList(data)\r\n\r\n                } catch (error) {\r\n                    setError(error.message);\r\n                }\r\n            };\r\n            getExpenditures();\r\n        }, [UserID])\r\n\r\n\r\n       \r\n\r\n\r\n        const addIncome = useCallback(async (name, kategorijaid, value) => {\r\n            console.log(\"function called\")\r\n            const Income = {\r\n                date: formattedDate,\r\n                kategorijaidprihod: kategorijaid,\r\n                name: name,\r\n                useridprihod: UserID,\r\n                value: value,\r\n            };\r\n            setIncomeList(prevIncomeList => [...prevIncomeList, Income])\r\n            updateIList(IncomeList)\r\n            console.log(\"NIER\", kategorijaid, Income.kategorijaidprihod)\r\n            \r\n            try {\r\n                \r\n                const response = await axios.post('http://localhost:8080/api/v1/prihod', Income ,{  headers: {\r\n                    'Content-Type': 'application/json'\r\n                }});\r\n                console.log(response.data);\r\n        \r\n                if (response.status === 200) {\r\n                    console.log('Income added Successfully');\r\n                    const newIncomeID = response.data;\r\n                    console.log(response.data.id)\r\n                    const res = await axios.post(`http://localhost:8080/api/v1/kategorija/addprihod/${Income.kategorijaidprihod}/${newIncomeID}`, { kategorijaid: Income.kategorijaidprihod, id: newIncomeID });\r\n                    console.log('PrihodID' + newIncomeID)\r\n                    console.log(res.data);\r\n                    if (res.status === 200) {\r\n                        console.log('Income added successfully to category');\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.error('Error adding Income', err);\r\n            }\r\n        }, [UserID]);\r\n\r\n\r\n\r\n            const addExpenditure = useCallback(async( name, kategorijaid, value) =>{\r\n                const Expenditure = {\r\n                    name: name,\r\n                    kategorijaidodhod: kategorijaid,\r\n                    date: formattedDate,\r\n                    useridodhod: UserID,\r\n                    value: value,\r\n                }\r\n                setExpenditureList(prevExpenditureList => [...prevExpenditureList, Expenditure])\r\n                updateEList(ExpenditureList)\r\n                console.log(\"KategorijaID Odhod:\" + Expenditure.kategorijaidodhod)\r\n                try {\r\n                    const response = await axios.post('http://localhost:8080/api/v1/odhod', Expenditure);\r\n                    console.log(response.data);\r\n            \r\n                    if (response.status === 200) {\r\n                        console.log('Expenditure added Successfully');\r\n                        const newExpenditureID = response.data\r\n                        console.log('OdhodID' + newExpenditureID)\r\n                        const res = await axios.post(`/addprihod/${Expenditure.kategorijaidodhod}/${Expenditure.id}`, { kategorijaid: Expenditure.kategorijaidodhod, id: newExpenditureID });\r\n                        console.log(Expenditure.id)\r\n                        console.log(res.data);\r\n\r\n                        if (res.status === 200) {\r\n                            console.log('Expenditure added successfully to category');\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error adding Expenditure', error);\r\n                }\r\n            }, [UserID]);\r\n\r\n         /*       const providePrihodi = async( kategorijaid ) => {\r\n                    try{\r\n\r\n                        const responser = await axios.get(`http://localhost:8080/api/v1/kategorija/vsiprihodi/${kategorijaid}`)\r\n                        console.log(responser)\r\n                        return responser.data\r\n                    }\r\n                    catch (error) {\r\n                        console.log(\"problem with getting transactions\", error)\r\n                    }\r\n                }\r\n\r\n          const provideOdhodi = async( kategorijaid ) => {\r\n              try{\r\n\r\n               const responser = await axios.get(`http://localhost:8080/api/v1/kategorija/vsiodhodi/${kategorijaid}`)\r\n               console.log(responser.data)\r\n               return responser.data\r\n                        \r\n                        \r\n             }\r\n              catch (error) {\r\n                        console.error(\"problem with getting transactions\", error)\r\n            }\r\n         };\r\n\r\n         const shapePrihodi = async (prihodid) => {\r\n            try{\r\n                const response = await axios.get(`http://localhost:8080/api/v1/prihod/${prihodid}`);\r\n                return response.data;\r\n\r\n            } catch {\r\n                console.log(\"Error fetching prihod details\", error)\r\n            }\r\n\r\n\r\n         }\r\n\r\n\r\n         const getSpecificPrihodi = async (kategorijaid) => {\r\n            const prihodIDArray = await providePrihodi(kategorijaid)\r\n\r\n            const prihodArray = await Promise.all(prihodIDArray.map(async (prihodID) => {\r\n                return await shapePrihodi(prihodID)\r\n            }))\r\n\r\n            console.log(prihodArray)\r\n         }*/\r\n\r\n  \r\n\r\n\r\n\r\n                \r\n\r\n\r\n\r\n    const updateIList = (newTList) => {\r\n        setIncomeList(newTList);\r\n    };\r\n    const updateEList = (newEList) => {\r\n        setExpenditureList(newEList)\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <MasterContext.Provider value={{ CategoryList, GetIncomeByID, setCategoryList, addCategory, updateCList, IncomeList, ExpenditureList, addIncome, addExpenditure, updateEList, updateIList }}>\r\n            {children}\r\n        </MasterContext.Provider>\r\n    )\r\n}\r\n\r\nexport default MasterProvider;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}